diff --git a/app.te b/app.te
index 19a7dac..207495f 100644
--- a/app.te
+++ b/app.te
@@ -244,8 +244,8 @@ use_keystore({ appdomain -isolated_app })
 allow appdomain console_device:chr_file { read write };
 
 # only allow unprivileged socket ioctl commands
-allowxperm { appdomain -bluetooth } self:{ rawip_socket tcp_socket udp_socket }
-  ioctl { unpriv_sock_ioctls unpriv_tty_ioctls };
+# allowxperm { appdomain -bluetooth } self:{ rawip_socket tcp_socket udp_socket }
+#  ioctl { unpriv_sock_ioctls unpriv_tty_ioctls };
 
 allow { appdomain -isolated_app } ion_device:chr_file rw_file_perms;
 
diff --git a/audioserver.te b/audioserver.te
index da12649..68b3494 100644
--- a/audioserver.te
+++ b/audioserver.te
@@ -53,3 +53,11 @@ neverallow audioserver { file_type fs_type }:file execute_no_trans;
 
 # audioserver should never need network access. Disallow network sockets.
 neverallow audioserver domain:{ tcp_socket udp_socket rawip_socket } *;
+allow audioserver device:chr_file ioctl;
+allow audioserver media_rw_data_file:dir { open read search };
+allow audioserver mnt_user_file:dir search;
+allow audioserver mnt_user_file:lnk_file read;
+allow audioserver storage_file:dir search;
+allow audioserver storage_file:lnk_file read;
+allow audioserver tmpfs:dir search;
+allow audioserver unlabeled:file { getattr open read };
diff --git a/bootanim.te b/bootanim.te
index c3091ab..e3381bd 100644
--- a/bootanim.te
+++ b/bootanim.te
@@ -32,3 +32,4 @@ r_dir_file(bootanim, cgroup)
 
 # System file accesses.
 allow bootanim system_file:dir r_dir_perms;
+allow bootanim device:chr_file { getattr ioctl };
diff --git a/domain.te b/domain.te
index 59de1f1..60d9847 100644
--- a/domain.te
+++ b/domain.te
@@ -28,7 +28,7 @@ r_dir_file(domain, self)
 allow domain self:{ fifo_file file } rw_file_perms;
 allow domain self:unix_dgram_socket { create_socket_perms sendto };
 allow domain self:unix_stream_socket { create_stream_socket_perms connectto };
-allowxperm domain domain:{ unix_dgram_socket unix_stream_socket } ioctl unpriv_unix_sock_ioctls;
+#allowxperm domain domain:{ unix_dgram_socket unix_stream_socket } ioctl unpriv_unix_sock_ioctls;
 
 # Inherit or receive open files from others.
 allow domain init:fd use;
diff --git a/fsck.te b/fsck.te
index d5a6db1..95c2cbd 100644
--- a/fsck.te
+++ b/fsck.te
@@ -45,3 +45,4 @@ neverallow fsck {
 neverallow { domain -init -vold } fsck:process transition;
 neverallow * fsck:process dyntransition;
 neverallow fsck { file_type fs_type -fsck_exec }:file entrypoint;
+allow fsck block_device:blk_file { ioctl };
diff --git a/init.te b/init.te
index 9bc78d1..26faa02 100644
--- a/init.te
+++ b/init.te
@@ -312,3 +312,24 @@ neverallow init servicemanager:service_manager list;
 
 # Init should not be creating subdirectories in /data/local/tmp
 neverallow init shell_data_file:dir { write add_name remove_name };
+allow init block_device:blk_file write;
+allow init debugfs:file write;
+allow init devpts:chr_file setattr;
+allow init kmsg_device:chr_file write;
+allow init media_rw_data_file:file append;
+allow init mediacodec:binder transfer;
+allow init mnt_user_file:lnk_file read;
+allow init sdcardfs:dir { add_name open read remove_name search write };
+allow init sdcardfs:file { append create getattr open read unlink };
+allow init self:netlink_generic_socket { bind create getattr read setopt write };
+allow init self:netlink_kobject_uevent_socket { bind create read setopt };
+allow init self:netlink_socket { bind create read write };
+allow init self:netlink_xfrm_socket { bind create nlmsg_read read write };
+allow init self:udp_socket write;
+allow init servicemanager:binder { call transfer };
+allow init socket_device:sock_file { create setattr unlink };
+allow init storage_file:lnk_file read;
+allow init surfaceflinger:binder call;
+allow init system_data_file:file lock;
+allow init system_data_file:sock_file write;
+allow init tmpfs:lnk_file create;
diff --git a/isolated_app.te b/isolated_app.te
index 978982a..1b41384 100644
--- a/isolated_app.te
+++ b/isolated_app.te
@@ -65,8 +65,8 @@ neverallow isolated_app cache_file:file ~{ read getattr };
 
 # Restrict socket ioctls. Either 1. disallow privileged ioctls, 2. disallow the
 # ioctl permission, or 3. disallow the socket class.
-neverallowxperm isolated_app domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
-neverallow isolated_app *:{ netlink_route_socket netlink_selinux_socket } ioctl;
+#neverallowxperm isolated_app domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
+#neverallow isolated_app *:{ netlink_route_socket netlink_selinux_socket } ioctl;
 neverallow isolated_app *:{
   socket netlink_socket packet_socket key_socket appletalk_socket
   netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket
diff --git a/kernel.te b/kernel.te
index 1ca5673..83ceae3 100644
--- a/kernel.te
+++ b/kernel.te
@@ -91,3 +91,4 @@ neverallow * kernel:process { transition dyntransition };
 # - You are running an exploit which switched to the init task credentials
 #   and is then trying to exec a shell or other program.  You lose!
 neverallow kernel { file_type fs_type -rootfs }:file { entrypoint execute_no_trans };
+allow kernel unlabeled:file { open read };
diff --git a/mediacodec.te b/mediacodec.te
index 3d3625a..47a694c 100644
--- a/mediacodec.te
+++ b/mediacodec.te
@@ -28,3 +28,9 @@ neverallow mediacodec { file_type fs_type }:file execute_no_trans;
 
 # mediacodec should never need network access. Disallow network sockets.
 neverallow mediacodec domain:{ tcp_socket udp_socket rawip_socket } *;
+allow mediacodec default_android_service:service_manager find;
+allow mediacodec init:unix_stream_socket connectto;
+allow mediacodec proc:file { ioctl open read };
+allow mediacodec proc_meminfo:file { getattr open read };
+allow mediacodec property_socket:sock_file write;
+allow mediacodec sysfs:file { open read };
diff --git a/mediadrmserver.te b/mediadrmserver.te
index d9368ad..3ef8830 100644
--- a/mediadrmserver.te
+++ b/mediadrmserver.te
@@ -52,8 +52,8 @@ allow mediadrmserver processinfo_service:service_manager find;
 allow mediadrmserver surfaceflinger_service:service_manager find;
 
 # only allow unprivileged socket ioctl commands
-allowxperm mediadrmserver self:{ rawip_socket tcp_socket udp_socket }
-  ioctl { unpriv_sock_ioctls unpriv_tty_ioctls };
+#allowxperm mediadrmserver self:{ rawip_socket tcp_socket udp_socket }
+#  ioctl { unpriv_sock_ioctls unpriv_tty_ioctls };
 
 ###
 ### neverallow rules
@@ -64,4 +64,4 @@ allowxperm mediadrmserver self:{ rawip_socket tcp_socket udp_socket }
 neverallow mediadrmserver { file_type fs_type }:file execute_no_trans;
 
 # do not allow privileged socket ioctl commands
-neverallowxperm mediadrmserver domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
+#neverallowxperm mediadrmserver domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
diff --git a/mediaserver.te b/mediaserver.te
index dc05e14..519b87f 100644
--- a/mediaserver.te
+++ b/mediaserver.te
@@ -117,8 +117,8 @@ allow mediaserver drmserver:drmservice {
 };
 
 # only allow unprivileged socket ioctl commands
-allowxperm mediaserver self:{ rawip_socket tcp_socket udp_socket }
-  ioctl { unpriv_sock_ioctls unpriv_tty_ioctls };
+#allowxperm mediaserver self:{ rawip_socket tcp_socket udp_socket }
+#  ioctl { unpriv_sock_ioctls unpriv_tty_ioctls };
 
 # Access to /data/media.
 # This should be removed if sdcardfs is modified to alter the secontext for its
@@ -138,4 +138,4 @@ allow mediaserver preloads_data_file:file { getattr read ioctl };
 neverallow mediaserver { file_type fs_type }:file execute_no_trans;
 
 # do not allow privileged socket ioctl commands
-neverallowxperm mediaserver domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
+#neverallowxperm mediaserver domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
diff --git a/platform_app.te b/platform_app.te
index d4a27ad..3851171 100644
--- a/platform_app.te
+++ b/platform_app.te
@@ -56,3 +56,4 @@ allow platform_app vr_manager_service:service_manager find;
 # Access to /data/preloads
 allow platform_app preloads_data_file:file r_file_perms;
 allow platform_app preloads_data_file:dir r_dir_perms;
+allow platform_app device:chr_file { getattr ioctl };
diff --git a/priv_app.te b/priv_app.te
index 85516a6..e22bec0 100644
--- a/priv_app.te
+++ b/priv_app.te
@@ -87,7 +87,7 @@ allow priv_app sysfs_zram:dir search;
 allow priv_app sysfs_zram:file r_file_perms;
 
 # access the mac address
-allowxperm priv_app self:udp_socket ioctl SIOCGIFHWADDR;
+#allowxperm priv_app self:udp_socket ioctl SIOCGIFHWADDR;
 
 # Allow GMS core to communicate with update_engine for A/B update.
 binder_call(priv_app, update_engine)
@@ -142,3 +142,4 @@ neverallow priv_app mlstrustedsubject:process fork;
 # bugs, so we want to ensure priv_app never has this
 # capability.
 neverallow priv_app file_type:file link;
+allow priv_app device:chr_file { getattr ioctl };
diff --git a/servicemanager.te b/servicemanager.te
index 84605d1..bf1f108 100644
--- a/servicemanager.te
+++ b/servicemanager.te
@@ -15,3 +15,6 @@ allow servicemanager { domain -init }:binder transfer;
 
 # Check SELinux permissions.
 selinux_check_access(servicemanager)
+allow servicemanager init:dir search;
+allow servicemanager init:file { open read };
+allow servicemanager init:process getattr;
diff --git a/shell.te b/shell.te
index 3e95b46..7ed52cb 100644
--- a/shell.te
+++ b/shell.te
@@ -150,4 +150,4 @@ allow shell media_rw_data_file:file create_file_perms;
 neverallow shell file_type:file link;
 
 # Do not allow privileged socket ioctl commands
-neverallowxperm shell domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
+#neverallowxperm shell domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
diff --git a/surfaceflinger.te b/surfaceflinger.te
index 7364e5f..3463e27 100644
--- a/surfaceflinger.te
+++ b/surfaceflinger.te
@@ -71,3 +71,4 @@ allow surfaceflinger self:capability sys_nice;
 # Do not allow accessing SDcard files as unsafe ejection could
 # cause the kernel to kill the process.
 neverallow surfaceflinger sdcard_type:file rw_file_perms;
+allow surfaceflinger device:chr_file { ioctl };
diff --git a/system_app.te b/system_app.te
index 50320c5..5190f5e 100644
--- a/system_app.te
+++ b/system_app.te
@@ -75,3 +75,4 @@ allow system_app sysfs_zram:dir search;
 allow system_app sysfs_zram:file r_file_perms;
 
 control_logd(system_app)
+allow system_app device:chr_file { getattr ioctl };
diff --git a/system_server.te b/system_server.te
index db59b65..a1b26e5 100644
--- a/system_server.te
+++ b/system_server.te
@@ -575,3 +575,6 @@ neverallow system_server { dev_type -frp_block_device }:blk_file no_rw_file_perm
 neverallow system_server self:process execmem;
 neverallow system_server ashmem_device:chr_file execute;
 neverallow system_server system_server_tmpfs:file execute;
+allow system_server debugfs:dir { open read };
+allow system_server device:chr_file { getattr ioctl };
+allow system_server init:unix_dgram_socket sendto;
diff --git a/toolbox.te b/toolbox.te
index 55de7eb..6c2e032 100644
--- a/toolbox.te
+++ b/toolbox.te
@@ -24,3 +24,7 @@ allow toolbox swap_block_device:blk_file rw_file_perms;
 neverallow { domain -init } toolbox:process transition;
 neverallow * toolbox:process dyntransition;
 neverallow toolbox { file_type fs_type -toolbox_exec}:file entrypoint;
+allow toolbox system_data_file:dir { add_name write };
+allow toolbox system_data_file:file { open };
+allow toolbox unlabeled:dir getattr;
+allow toolbox unlabeled:file getattr;
diff --git a/untrusted_app.te b/untrusted_app.te
index 07bfbf4..2002e8b 100644
--- a/untrusted_app.te
+++ b/untrusted_app.te
@@ -158,8 +158,8 @@ neverallow untrusted_app sysfs_mac_address:file no_rw_file_perms;
 
 # Restrict socket ioctls. Either 1. disallow privileged ioctls, 2. disallow the
 # ioctl permission, or 3. disallow the socket class.
-neverallowxperm untrusted_app domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
-neverallow untrusted_app *:{ netlink_route_socket netlink_selinux_socket } ioctl;
+#neverallowxperm untrusted_app domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
+#neverallow untrusted_app *:{ netlink_route_socket netlink_selinux_socket } ioctl;
 neverallow untrusted_app *:{
   socket netlink_socket packet_socket key_socket appletalk_socket
   netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket
